[
  {
    "id": "install",
    "title": "Install",
    "about": "Find the right Upspark package for your operating system and archecture.",
    "content": "<p>You can get Upspark on your computer by downloading the appropriate package or installer from the <a href=\"/downloads\">download</a> page.</p>\n<p>Refer to the table below to locate the platform’s directory.</p>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n<th>Platform</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows</td>\n<td>%USERPROFILE%/.upspark</td>\n</tr>\n<tr>\n<td>OSX</td>\n<td>~/Library/Application Support/Upspark</td>\n</tr>\n<tr>\n<td>Linux</td>\n<td>$XDG_CONFIG_HOME/Upspark <strong>or</strong> ~/.config/Upspark</td>\n</tr>\n</tbody>\n</table>\n<p>You can also use the system tray menu option <em>Resources</em> to open this directory.</p>",
    "children": [
      {
        "id": "included",
        "title": "Included",
        "about": "Upspark requires a few important files that get created on first launch.",
        "content": "<p>After launching Upspark, a few important files will be created.</p>\n<p>If these core files are deleted, Upspark will create a new one in it’s place with the default contents. The only exception is when the package.json is modified to load an alternative main script; Upspark will not create platform.js</p>\n<table>\n<thead>\n<tr>\n<th>File</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>package.json</td>\n<td>Can be used to install packages with npm or yarn. Additionally the main flag in this document can be changed to point to a new platform script.</td>\n</tr>\n<tr>\n<td>settings.json</td>\n<td>Stores the settings for Upspark. Includes configuration such as location, size, theme and hotkey.</td>\n</tr>\n<tr>\n<td>upspark.log</td>\n<td>Can be used to further understand bugs and issues when using the runner.</td>\n</tr>\n<tr>\n<td>platform.js</td>\n<td>The default entry point for Upspark. This can be changed in settings.json.</td>\n</tr>\n</tbody>\n</table>",
        "children": []
      },
      {
        "id": "launch",
        "title": "Launch",
        "about": "Run and toggle Upspark in a couple of different ways.",
        "content": "<p>After launching the application, a splash screen with a loading bar will display. After a moment, the main runner will display.</p>\n<p>By default, you can toggle the visibility and focus of the runner with the following key combination</p>\n<pre><code class=\"language-javascript\">CTRL + <span class=\"hljs-string\">`\n</span></code></pre>\n<p>Another way to toggle the runner is to click on the Upspark tray icon.</p>",
        "children": []
      }
    ]
  },
  {
    "id": "runner",
    "title": "Runner",
    "about": "The runner is the face of Upspark. Execute commands and observe results.",
    "content": "<p><img src=\"./image/command.png\" alt=\"Upspark Runner\"></p>\n<p>The three main sections of runner pictured above, from bottom left to top right are</p>\n<ul>\n<li>Command History</li>\n<li>Command Input</li>\n<li>Command Output</li>\n</ul>\n<p>When opened or toggled, Upspark will focus on the command input.</p>",
    "children": [
      {
        "id": "commands",
        "title": "Commands",
        "about": "Upspark commands are executed by typing the command name and pressing enter.",
        "content": "<p>To run a task, type the command and press <em>enter</em>. The format of a command is -</p>\n<pre><code>[type]task[arg1 arg2 arg3 argN...]\n</code></pre>\n<p>The command type decides how Upspark will execute the task. When no type is provided, Upspark will execute the task against your platform script <em>(labeled Platform below)</em>.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Prefix</th>\n<th>Execution</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Platform</td>\n<td><strong>#</strong></td>\n<td>Upspark will attempt to execute any exported function in <em>platform.js</em> that has the same name as the <strong>task</strong>. Any arguments are passed as arguments to the function. If possible, The runner will display the returned result. <em><a href=\"/tutorial#scripting\">see scripting further down</a></em></td>\n<td>hello</td>\n</tr>\n<tr>\n<td>System</td>\n<td><strong>:</strong></td>\n<td>Upspark will run the task against available system commands. Note, system commands are not user controlled. <em><a href=\"/documentation#system-commands\">see a full list of system commands here</a></em></td>\n<td>:reload :clear :platform :settings</td>\n</tr>\n<tr>\n<td>Runtime</td>\n<td><strong>&gt;</strong></td>\n<td>Upspark will proxy the task and the arguments against the current machine’s shell.</td>\n<td>&gt;ping &gt;node &gt;ls-a</td>\n</tr>\n</tbody>\n</table>\n<p>Pressing <strong>ESCAPE</strong> will clear the current command input.</p>",
        "children": []
      },
      {
        "id": "arguments",
        "title": "Arguments",
        "about": "Upspark commands can be linked with optional arguments.",
        "content": "<p><img src=\"./image/arguments.png\" alt=\"Upspark Commands\"></p>\n<p>Commands for a task are separated by a single space. In order to provide a task a <em>multiline</em> argument, ctrl + space can be pressed.</p>\n<p><img src=\"./image/multiline-arguments.png\" alt=\"Multiline Argument\"></p>\n<p>Here’s a table outlining the hotkeys used to handle arguments and navigate between these.</p>\n<table>\n<thead>\n<tr>\n<th>Hotkey</th>\n<th>Action</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CTRL + SPACE</td>\n<td>Create new multiline argument <strong>or</strong> will navigate to the next available argument</td>\n</tr>\n<tr>\n<td>CTRL + SHIFT + SPACE</td>\n<td>Navigate to the last argument or the command input</td>\n</tr>\n<tr>\n<td>SHIFT + ENTER</td>\n<td>Remove current multiline argument</td>\n</tr>\n</tbody>\n</table>\n<p>Note, when the application is focused on multiline argument: <strong>CTRL + ENTER</strong> can be used to execute a command.</p>",
        "children": []
      },
      {
        "id": "execution",
        "title": "Execution",
        "about": "Upspark commands are labeled in the history pane to indicate their current execution status.",
        "content": "<p>When commands are executed the command history will populate with the command name and indicate the task’s current status.</p>\n<p>A successful command execution is indicated by a command that is underlined blue.</p>\n<p><img src=\"./image/success.png\" alt=\"Successful\"></p>\n<p>When the command is underlined with an intermediate progress bar, the command is still executing.</p>\n<p><img src=\"./image/progress.png\" alt=\"In Progress\"></p>\n<p>When the command is underlined with a red bar, this indicates an error has occurred. This is followed by an error message indicating the root cause.</p>\n<p><img src=\"./image/invalid.png\" alt=\"Error\"></p>",
        "children": []
      },
      {
        "id": "history",
        "title": "History",
        "about": "Upspark will store up to 200 historical commands.",
        "content": "<p>Command history can be navigated by using the arrow keys. When navigating commands, Upspark will restore the command and it’s arguments. This can be helpful for re-executing a task.</p>\n<p>An arrow indicates the current command in focus.</p>\n<p><img src=\"./image/history.png\" alt=\"Successful\"></p>\n<p>Note, a grey underline means the last time this command was executed was not in the current session. In this case, the command output will not be displayed.</p>\n<p>Any command still in progress can be canceled by being focused and pressing <strong>CTRL + C</strong></p>\n<p><img src=\"./image/abort.png\" alt=\"Abort\"></p>",
        "children": []
      },
      {
        "id": "repl",
        "title": "REPL",
        "about": "Use the history view of Upspark to communicate with a REPL process.",
        "content": "<p>You can send messages to a long running process by entering REPL mode.</p>\n<p>This is done by focusing on the command in historical view -\n<img src=\"./image/repl-start.png\" alt=\"Focus on REPL\"></p>\n<p>Then by pressing the <strong>right arrow</strong>. This will cause Upspark to toggle REPL mode, in which any command will be proxied to the focused task.</p>\n<p>In this case, to the node.js process.\n<img src=\"./image/repl.png\" alt=\"REPL mode\"></p>\n<p>History from the current REPL session will display in the command output.\n<img src=\"./image/repl-example.png\" alt=\"REPL mode\"></p>\n<p>Press <strong>left arrow</strong> to exit REPL mode.</p>",
        "children": []
      }
    ]
  },
  {
    "id": "scripting",
    "title": "Scripting",
    "about": "Use the platform script to create and export commands.",
    "content": "<p>Upspark will load any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Browser_compatibility\">exported</a> declarations from the <strong>platform</strong> script. Here’s a hello task inside the <strong>platform.js</strong> file -</p>\n<pre><code class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'os'</span>).userInfo().username;\n}\n\n</code></pre>\n<p>Note, the command declaration does not have to be a function. Additionally the command does not have to have a return value.</p>\n<p>The below declaration will still have the same effect.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> hello = <span class=\"hljs-string\">\"Hello \"</span> + <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'os'</span>).userInfo().username;\n</code></pre>\n<p>The important difference when using a variable vs. a function is that the variable will not be able to accept the arguments from the runner to perform logic.</p>\n<p>Upspark will resolve a promise if the function returns one.</p>\n<p>Here’s a simulated 1000ms long wait on the hello function.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> { \n\t\tsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> resolve(<span class=\"hljs-string\">\"Hello \"</span> + <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'os'</span>).userInfo().username), <span class=\"hljs-number\">1000</span>);\t\n\t});\n}\n</code></pre>\n<p>When no return value is provided, Upspark will simply finish the task with no output.</p>\n<p>This may not be the desired effect. If instead your goal was to execute logic in the background and resolve the value later, you can either use the promise pattern <strong>or</strong> use <a href=\"/tutorial#background-tasks\">background</a> tasks.</p>",
    "children": [
      {
        "id": "reloading",
        "title": "Reloading",
        "about": "After updating the platform file, reload Upspark's references with the reload command.",
        "content": "<p>The simplest way to reload commands that have been introduced in the script file is by executing <strong>:reload</strong> in the runner -</p>\n<p><img src=\"./image/reload.png\" alt=\"Reload Command\"></p>\n<p>Alternatively restarting Upspark will also perform a reload of the platform file.</p>",
        "children": []
      },
      {
        "id": "function-arguments",
        "title": "Parameters ",
        "about": "Pipe arguments from the runner to the platform with function parameters.",
        "content": "<p>Here’s an example of a basic command that simply returns the argument to the user.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">echo</span>(<span class=\"hljs-params\">argument</span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'You said \"'</span> + argument + <span class=\"hljs-string\">'\"'</span>;\n}\n</code></pre>\n<p>The task title is <strong>echo</strong>. To execute the command, type <strong>echo</strong> with the argument on the runner.</p>\n<p><img src=\".%5Cimage%5Cecho.png\" alt=\"Echo Command\"></p>\n<p>Because <strong>argument</strong> is used without any existence checking, when no argument is supplied -</p>\n<p><img src=\"./image/echo-argless.png\" alt=\"Echo Command, with no argument\"></p>",
        "children": []
      },
      {
        "id": "function-null-arguments",
        "title": "Null Parameters",
        "about": "Here are some tips on resolving null parameters from the runner.",
        "content": "<p>Here’s an updated echo command with null checking -</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">echo</span>(<span class=\"hljs-params\">argument</span>) </span>{\n\t<span class=\"hljs-keyword\">if</span>(!argument) {\n\t\targument = <span class=\"hljs-string\">'nothing'</span>;\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'You said \"'</span> + argument + <span class=\"hljs-string\">'\"'</span>;\n}\n</code></pre>\n<p>Alternatively, you can use simply use default arguments -</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">echo</span>(<span class=\"hljs-params\">argument = <span class=\"hljs-string\">'nothing'</span></span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'You said \"'</span> + argument + <span class=\"hljs-string\">'\"'</span>; \n}\n</code></pre>\n<p>Since Upspark supports ECMAScript 7, here’s the same task with an arrow function expression and template literals.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> echo = <span class=\"hljs-function\">(<span class=\"hljs-params\">argument = <span class=\"hljs-string\">'nothing'</span></span>) =&gt;</span> <span class=\"hljs-string\">`You said \"<span class=\"hljs-subst\">${argument}</span>\"`</span>;\n</code></pre>",
        "children": []
      },
      {
        "id": "function-n-arguments",
        "title": "Many Parameters",
        "about": "Upspark will bind all the arguments from the runner to the task function.",
        "content": "<p>Upspark will still call the task’s function with the runner arguments even when the parameters are not provided in the method signature.</p>\n<p>This means you can use the <strong>rest</strong> parameter syntax to catch a variable number of arguments -</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">roots</span>(<span class=\"hljs-params\">...args</span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.from(args).map(<span class=\"hljs-built_in\">Math</span>.sqrt);\n}\n</code></pre>\n<p>Alternatively use the <strong>arguments</strong> object. This will only work for traditional function expressions.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">roots</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">arguments</span>).map(<span class=\"hljs-built_in\">Math</span>.sqrt);\n}\n</code></pre>",
        "children": []
      },
      {
        "id": "api",
        "title": "API",
        "about": "Upspark comes pre-packaged with a light weight promised based API to help with simple tasks.",
        "content": "<p>Upspark comes prepacked with a light weight promise based API to help with simple tasks.</p>\n<table>\n<thead>\n<tr>\n<th>Route</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"/documentation#safe\">upspark/safe</a></td>\n<td>Get values stored in the <a href=\"/tutorial#safe\">safe</a>.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#platform\">upspark/platform</a></td>\n<td>Get platform commands or reload the platform script.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#runner\">upspark/runner</a></td>\n<td>Control the main runner and execute tasks.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#settings\">upspark/settings</a></td>\n<td>Get and set <a href=\"/tutorial#settings\">settings</a>.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#desktop\">upspark/desktop</a></td>\n<td>Open host applications and control the clipboard.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#file\">upspark/file</a></td>\n<td>Basic file operations e.g. stat, copy, move, delete, create and more.</td>\n</tr>\n<tr>\n<td><a href=\"/documentation#net\">upspark/net</a></td>\n<td>Make HTTP calls with the request api.</td>\n</tr>\n</tbody>\n</table>\n<p>Here’s an example of using the API in <strong>platform.js</strong></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> Desktop <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'upspark/desktop'</span>\n\n<span class=\"hljs-comment\">// Attach the argument to the clipboard and return the previous result</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> replace = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =&gt;</span> Desktop\n\t.getClipboardText()\n\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {\n\t\tDesktop.setClipboardText(arg);\n\t\t\n\t\t<span class=\"hljs-keyword\">return</span> text;\n\t})\n</code></pre>\n<p>Learn all the API functionality in the <a href=\"/documentation\">documentation</a>.</p>",
        "children": []
      },
      {
        "id": "background-tasks",
        "title": "Background",
        "about": "Use the background action to postpone the resolution of a task ",
        "content": "<p>It’s possible to postpone or delay a task’s completion. This is done by using a task function witch is bound to the <strong>this</strong> object for commands.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delay</span>(<span class=\"hljs-params\"></span>) </span>{\n\t<span class=\"hljs-keyword\">this</span>.background(); <span class=\"hljs-comment\">// Task function</span>\n\n\tsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.message(<span class=\"hljs-string\">'Chugging along'</span>), <span class=\"hljs-number\">1000</span>); <span class=\"hljs-comment\">//After one section, \"Chugging along\" is rendered</span>\n\n\tsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.complete(<span class=\"hljs-string\">'All done'</span>), <span class=\"hljs-number\">2000</span>); <span class=\"hljs-comment\">//After two seconds, \"All done\" is displayed </span>\n\n\t<span class=\"hljs-keyword\">this</span>.message(<span class=\"hljs-string\">'Starting...'</span>); <span class=\"hljs-comment\">//This message is rendered right away, before the other two</span>\n}\n</code></pre>\n<p>Note, because background, message and complete depend on the this object; the command declaration can not use fat arrow syntax.</p>\n<p>Learn more about task functionality in the <a href=\"/documentation#tasks\">documentation</a>.</p>",
        "children": []
      },
      {
        "id": "importing",
        "title": "Importing",
        "about": "Upspark can be expanded with local modules or NPM modules.",
        "content": "<p>You can leverage script imports to help separate code logic or include a NPM module.</p>\n<p>Consider the following platform directory structure</p>\n<pre><code>.upspark/\n-----&gt; platform.js\n-----&gt; lib/\n--------------&gt; logger.js\n</code></pre>\n<p>Here’s logger.js</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> log = <span class=\"hljs-function\">(<span class=\"hljs-params\">message</span>) =&gt;</span> message.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">140</span>);\n\n</code></pre>\n<p>Here’s platform.js using the log function and renaming it to debug</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> {log} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./lib/logger'</span>;\n\n<span class=\"hljs-keyword\">export</span> {log <span class=\"hljs-keyword\">as</span> debug};\n</code></pre>\n<p>Now the command <strong>debug</strong> will return the first 140 characters of the argument.</p>",
        "children": []
      },
      {
        "id": "npm",
        "title": "Packages",
        "about": "Upspark can be expanded with NPM modules.",
        "content": "<p>NPM and YARN commands can be run against the platform directory. This means, you can use any NPM module in your <strong>platform.js</strong> file.</p>\n<p>For example, here’s the command to install lodash -</p>\n<pre><code>npm install lodash --save\n</code></pre>\n<p>Then you can use lodash functionality with an import in platform.js</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash'</span>;\n</code></pre>\n<p>As a side note, you could’ve also used Upspark to install the module</p>\n<p><img src=\"./image/npm-install.png\" alt=\"NPM install\"></p>",
        "children": []
      }
    ]
  },
  {
    "id": "safe",
    "title": "Safe",
    "about": "Upspark provides access to a 256 AES data store known as the Safe.",
    "content": "<p>The Safe is a AES-256 password encrypted file on your local machine storing sensitive information in a key value format. These key/value pairs can then be used in your scripting efforts. This is helpful for</p>\n<ul>\n<li>Using passwords</li>\n<li>Using API keys</li>\n<li>Sharing code snippets with host machine unique data</li>\n</ul>\n<p>Upspark provides a way to configure these key value pairs with the Safe interface.</p>\n<p>There are two ways to open the Safe interface.</p>\n<ul>\n<li>Execute <strong>:safe</strong> in the runner</li>\n<li>Click <em>Safe</em> in the contact menu on your system tray</li>\n</ul>\n<p>After configuring the Safe, use this programmatically with the <a href=\"/documentation#safe\">safe api module</a></p>",
    "children": []
  },
  {
    "id": "logs",
    "title": "Logs",
    "about": "Use Upspark logs to identify issues.",
    "content": "<p>Upspark emits all of it’s runtime efforts to the upspark.log file in the platform directory.</p>\n<p>This is the first place to look when issues occur.</p>\n<p>Use the <strong>:log</strong> system command to open this file easier.</p>\n<p><img src=\"./image/log.png\" alt=\"Log Command\"></p>",
    "children": []
  }
]