
@function contrasting-text-color($color) {
  @if (lightness( $color ) > 50) {
    @return #000;
  } @else {
    @return #fff;
  }
}


@mixin emit-palette($selector, $name, $color, $palette-variations, $background-property, $text-property:null) {

  #{$selector} {
    @if $background-property != null {
      #{$background-property}: $color;
    }

    @if $text-property != null {
      #{$text-property}: contrasting-text-color($color);
    }
  }

  @each $type, $variation in $palette-variations {

    $variation-aliases: map_get($variation, "aliases");
    $variation-action: map_get($variation, "action");
    $variation-depth: map_get($variation, "depth");
    $variation-label: map_get($variation, "label");
    $variation-step: map_get($variation, "step");
    $variation-base: map_get($variation, "base");

    $aliases-length: length($variation-aliases);

    @for $i from 1 to $variation-depth + 1 {

      $labels: ("#{$selector}--#{$type}-#{$variation-label * $i}");

      @if $i == 1 and index($variation-aliases, $type) == null {
        $labels: append(
                        $labels,
                        unquote("#{$selector}--#{$type}"),
                        comma
        );
      }

      @if $i <= $aliases-length {
        $variation-modifier: nth($variation-aliases, $i);

        $labels: append(
                        $labels,
                        unquote("#{$selector}--#{$variation-modifier}"),
                        comma
        );
      }

      $value: $variation-base + ($variation-step * $i);
      $result: call($variation-action, $color, $value);

      #{$labels} {
        @if $background-property != null {
          #{$background-property}: $result;
        }
        @if $text-property != null {
          #{$text-property}: contrasting-text-color($result);
        }
      }

    }
  }
}